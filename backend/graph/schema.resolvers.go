package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"time"

	"github.com/hemanta212/hackernews-go-graphql/graph/model"
	"github.com/hemanta212/hackernews-go-graphql/internal/auth"
	"github.com/hemanta212/hackernews-go-graphql/internal/links"
	"github.com/hemanta212/hackernews-go-graphql/internal/users"
	"github.com/hemanta212/hackernews-go-graphql/internal/votes"
	"github.com/hemanta212/hackernews-go-graphql/pkg/jwt"
)

// Post is the resolver for the post field.
func (r *mutationResolver) Post(ctx context.Context, input model.NewLink) (*model.Link, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Link{}, fmt.Errorf("Acces denied")
	}

	link := &links.Link{
		Description: input.Description,
		Url:         input.URL,
		PostedBy:    user,
		CreatedAt:   time.Now().UTC().Format("2006-01-02 15:04:05"),
	}
	linkID := link.Save()
	link.ID = strconv.FormatInt(linkID, 10)

	return model.FromLink(link), nil
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.NewUser) (*model.AuthPayload, error) {
	var payload model.AuthPayload
	user := &users.User{
		Username: input.Username,
		Password: input.Password,
		Email:    input.Email,
	}

	id, err := user.Save()
	if err != nil {
		return &payload, err
	}
	user.ID = strconv.FormatInt(id, 10)

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return &payload, err
	}

	return &model.AuthPayload{
		Token: &token,
		User:  model.FromUser(user),
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (*model.AuthPayload, error) {
	var payload model.AuthPayload
	user, err := users.GetUserByUsername(input.Username)
	if err != nil {
		return &payload, &users.WrongUsernameOrPasswordError{}
	}
	if !user.Authenticate(input.Password) {
		return &payload, &users.WrongUsernameOrPasswordError{}
	}
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return &payload, err
	}
	return &model.AuthPayload{
		Token: &token,
		User:  model.FromUser(user),
	}, nil
}

// Vote is the resolver for the vote field.
func (r *mutationResolver) Vote(ctx context.Context, linkID string) (*model.Vote, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("Acces denied")
	}

	linkId, err := strconv.Atoi(linkID)
	if err != nil {
		return nil, err
	}
	link, err := links.GetLinkByID(linkId)

	vote := &votes.Vote{
		Link:    link,
		VotedBy: user,
	}
	voteID := vote.Save()
	vote.ID = strconv.FormatInt(voteID, 10)

	return model.FromVote(vote), nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", fmt.Errorf("access is denied")
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Feed is the resolver for the feed field.
func (r *queryResolver) Feed(ctx context.Context, filter *string) (*model.Feed, error) {
	linkMod := &links.LinkMod{}
	if filter != nil {
		linkMod.Filter = fmt.Sprintf("%%%s%%", *filter)
	} else {
		linkMod.Filter = "%%"
	}

	var dbLinks []*links.Link
	dbLinks = links.GetAll(linkMod)
	// perform conversion to model.Link
	var resultLinks []*model.Link
	for _, link := range dbLinks {
		custom_votes, err := votes.GetVotesByLinkId(link.ID)
		if err != nil {
			log.Fatal(err)
		}
		model_votes := []*model.Vote{}
		for _, vote := range custom_votes {
			model_votes = append(model_votes, model.FromVote(vote))
		}
		modelLink := model.FromLink(link)
		modelLink.Votes = model_votes

		resultLinks = append(resultLinks, modelLink)
	}
	return &model.Feed{ID: "1", Links: resultLinks, Count: len(resultLinks)}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
