// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AuthPayload struct {
	Token *string `json:"token"`
	User  *User   `json:"user"`
}

type Feed struct {
	ID    string  `json:"id"`
	Links []*Link `json:"links"`
	Count int     `json:"count"`
}

type Link struct {
	ID          string    `json:"id"`
	Description string    `json:"description"`
	PostedBy    *User     `json:"postedBy"`
	URL         string    `json:"url"`
	CreatedAt   time.Time `json:"createdAt"`
	Votes       []*Vote   `json:"votes"`
}

type LinkOrderByInput struct {
	Description *Sort `json:"description"`
	CreatedAt   *Sort `json:"createdAt"`
}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type NewLink struct {
	Description string `json:"description"`
	URL         string `json:"url"`
}

type NewUser struct {
	Username string  `json:"username"`
	Password string  `json:"password"`
	Email    *string `json:"email"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type User struct {
	ID       string  `json:"id"`
	Username string  `json:"username"`
	Email    *string `json:"email"`
}

type Vote struct {
	ID   string `json:"id"`
	Link *Link  `json:"link"`
	User *User  `json:"user"`
}

type Sort string

const (
	SortAsc  Sort = "asc"
	SortDesc Sort = "desc"
)

var AllSort = []Sort{
	SortAsc,
	SortDesc,
}

func (e Sort) IsValid() bool {
	switch e {
	case SortAsc, SortDesc:
		return true
	}
	return false
}

func (e Sort) String() string {
	return string(e)
}

func (e *Sort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sort", str)
	}
	return nil
}

func (e Sort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
